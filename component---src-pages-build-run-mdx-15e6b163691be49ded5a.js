(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{YSzg:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return p}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),r=n("013z");n("qKvR");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={},o={_frontmatter:i},c=r.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(c,l({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",null,"Pre-requisites"),Object(a.b)("p",null,"Be sure to have cloned the root repository: ",Object(a.b)("inlineCode",{parentName:"p"},"refarch_kc")," as there is a dependency on the environment setting scripts (",Object(a.b)("inlineCode",{parentName:"p"},"refarch_kc/scripts/setenv.sh"),")."),Object(a.b)("p",null,"The UI is using Angular so you need to get angular CLI installed, nodejs and npm."),Object(a.b)("p",null,"Keep npm up to date with the command:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"npm install -g npm\n")),Object(a.b)("p",null,"Verify node version (we run v 12.0)"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"node -v\n")),Object(a.b)("p",null,"To install or update Angular CLI"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"cd ui\nnpm install -g @angular/cli\n")),Object(a.b)("p",null,"And install all the dependencies"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"npm install\n")),Object(a.b)("p",null,"The project was started with Angular 6 and then migrated to Angular 8 with the commands:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"ng update @angular/cli @angular/core\nng update @angular/material\n")),Object(a.b)("p",null,"The test driven development approach is done using ",Object(a.b)("a",l({parentName:"p"},{href:"https://mochajs.org/"}),"mocha")," as test runner and ",Object(a.b)("a",l({parentName:"p"},{href:"https://www.chaijs.com"}),"chai")," for assertion library and Typescript. Which means those tools were installed with the command:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"$ npm install mocha chai ts-node --save-dev\n# and install the supporting types for Typescript\n# npm install @types/chai @types/mocha --save-dev\n")),Object(a.b)("h2",null,"Build"),Object(a.b)("h3",null,"UI Build"),Object(a.b)("p",null,"While doing development, you can build the UI first, by being under the ",Object(a.b)("inlineCode",{parentName:"p"},"ui")," folder and run:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"ng build\n")),Object(a.b)("p",null,"You should get a trace like:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"chunk {main} main-es2015.js, main-es2015.js.map (main) 156 kB [initial] [rendered]\nchunk {polyfills} polyfills-es2015.js, polyfills-es2015.js.map (polyfills) 438 kB [initial] [rendered]\nchunk {runtime} runtime-es2015.js, runtime-es2015.js.map (runtime) 6.08 kB [entry] [rendered]\nchunk {styles} styles-es2015.js, styles-es2015.js.map (styles) 392 kB [initial] [rendered]\nchunk {vendor} vendor-es2015.js, vendor-es2015.js.map (vendor) 5.81 MB [initial] [rendered]\n")),Object(a.b)("p",null,"The build artifacts will be stored in the ",Object(a.b)("inlineCode",{parentName:"p"},"dist/")," directory. Use the ",Object(a.b)("inlineCode",{parentName:"p"},"--prod")," flag for a production build so the javascripts will be smaller."),Object(a.b)("p",null,"It is possible to test the User interface without the nodejs backend, by using"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"ng serve\n")),Object(a.b)("p",null,"Navigate to ",Object(a.b)("a",l({parentName:"p"},{href:"http://localhost:4200/"}),"http://localhost:4200/"),". The app will automatically reload if you change any of the UI source files."),Object(a.b)("p",null,"You may encounter some issues as there are dependencies on the backend nodejs for some APIs and data."),Object(a.b)("h3",null,"UI Running unit tests"),Object(a.b)("p",null,"Run ",Object(a.b)("inlineCode",{parentName:"p"},"ng test")," to execute the unit tests via ",Object(a.b)("a",l({parentName:"p"},{href:"https://karma-runner.github.io"}),"Karma"),"."),Object(a.b)("h3",null,"Build and run the BFF server"),Object(a.b)("p",null,"Run the command below:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"npm serve\n")),Object(a.b)("p",null,"All those commands are executed when developing the server or ui parts. But when we need to deploy the user interface with the other components of the solution we first need to build a docker image and then be sure the other services are deployedâ€¦"),Object(a.b)("h3",null,"Dockerize all"),Object(a.b)("p",null,"Build UI and server in one command: (this is what a CI/CD pipeline will use)."),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"./scripts/buildDocker.sh\n")),Object(a.b)("p",null,"This will build a docker image, named: ",Object(a.b)("inlineCode",{parentName:"p"},"ibmcase/kcontainer-ui:latest")," for local execution using docker-compose."),Object(a.b)("p",null,"If you run on minikube locally use:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"./scripts/buildDocker.sh MINIKUBE\n")),Object(a.b)("h2",null,"Run locally"),Object(a.b)("p",null,"To be able to run the UI and server locally, you need to have at least the following kafka, zookeeper, order command, order query and fleet simulator microservices up and running."),Object(a.b)("p",null,"As introduced before we have two options to run the solution, Minikube or docker-compose."),Object(a.b)("h3",null,"Using docker compose"),Object(a.b)("p",null,"We recommend to read ",Object(a.b)("a",l({parentName:"p"},{href:"https://ibm-cloud-architecture.github.io/refarch-kc/deployments/local/"}),"this chapter")),Object(a.b)("p",null,"If not done already start Kafka and zookeeper using the docker compose file in the root project:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"cd ../refarch-kc/docker\ndocker-compose -f backbone-compose.yml up\n")),Object(a.b)("p",null,"Start the Fleet simulator.  For the fleet simulator ",Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-kc-ms/tree/master/fleet-ms#run"}),"see instructions here")," to run the simulator locally."),Object(a.b)("p",null,"Run the following command:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"./scripts/buildLocal.sh\n")),Object(a.b)("p",null,"Start the UI and BFF locally with ",Object(a.b)("inlineCode",{parentName:"p"},"./scripts/run.sh")," or with a docker ",Object(a.b)("inlineCode",{parentName:"p"},"./scripts/runDocker.sh"),"."),Object(a.b)("p",null,"Use your web browser at ",Object(a.b)("a",l({parentName:"p"},{href:"http://localhost:31010"}),"http://localhost:31010")),Object(a.b)("h3",null,"Using Minikube"),Object(a.b)("p",null,"See the instruction in ",Object(a.b)("a",l({parentName:"p"},{href:"https://ibm-cloud-architecture.github.io/refarch-kc/deployments/minikube/"}),"this article")," for deploying all the components."),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"scripts\\deployHelm MINIKUBE latest")," command to use Helm to deploy the user interface release."),Object(a.b)("p",null,"Use your web browser at ",Object(a.b)("a",l({parentName:"p"},{href:"http://localhost:31010"}),"http://localhost:31010")),Object(a.b)("h2",null,"Deploy to OpenShift Container Platform (OCP)"),Object(a.b)("h3",null,"Deployment prerequisites"),Object(a.b)("p",null,"Regardless of specific deployment targets (OCP, IKS, k8s), the following prerequisite Kubernetes artifacts need to be created to support the deployments of application components.  These artifacts need to be created once per unique deployment of the entire application and can be shared between application components in the same overall application deployment."),Object(a.b)("p",null,"1.Create ",Object(a.b)("inlineCode",{parentName:"p"},"kafka-brokers")," ConfigMap"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Command: ",Object(a.b)("inlineCode",{parentName:"li"},"kubectl create configmap kafka-brokers --from-literal=brokers='<replace with comma-separated list of brokers>' -n <namespace>")),Object(a.b)("li",{parentName:"ul"},"Example: ",Object(a.b)("inlineCode",{parentName:"li"},"kubectl create configmap kafka-brokers --from-literal=brokers='broker-3-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-2-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-1-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-5-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-0-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-4-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093' -n eda-refarch"))),Object(a.b)("p",null,"2.Create optional ",Object(a.b)("inlineCode",{parentName:"p"},"eventstreams-apikey")," Secret, if you are using Event Streams as your Kafka broker provider"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Command: ",Object(a.b)("inlineCode",{parentName:"li"},"kubectl create secret generic eventstreams-apikey --from-literal=binding='<replace with api key>' -n <namespace>")),Object(a.b)("li",{parentName:"ul"},"Example: ",Object(a.b)("inlineCode",{parentName:"li"},"kubectl create secret generic eventstreams-apikey --from-literal=binding='z...12345...notanactualkey...67890...a' -n eda-refarch"))),Object(a.b)("h3",null,"Deploy to OCP 3.11"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Cross-component deployment prerequisites:")," ",Object(a.b)("em",{parentName:"p"},"(needs to be done once per unique deployment of the entire application)")),Object(a.b)("p",null,"1.If desired, create a non-default Service Account for usage of deploying and running the K Container reference implementation.  This will become more important in future iterations, so itâ€™s best to start small:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Command: ",Object(a.b)("inlineCode",{parentName:"li"},"oc create serviceaccount -n <target-namespace> kcontainer-runtime")),Object(a.b)("li",{parentName:"ul"},"Example: ",Object(a.b)("inlineCode",{parentName:"li"},"oc create serviceaccount -n eda-refarch kcontainer-runtime"))),Object(a.b)("p",null,"2.The target Service Account needs to be allowed to run containers as ",Object(a.b)("inlineCode",{parentName:"p"},"anyuid")," for the time being:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Command: ",Object(a.b)("inlineCode",{parentName:"li"},"oc adm policy add-scc-to-user anyuid -z <service-account-name> -n <target-namespace>")),Object(a.b)("li",{parentName:"ul"},"Example: ",Object(a.b)("inlineCode",{parentName:"li"},"oc adm policy add-scc-to-user anyuid -z kcontainer-runtime -n eda-refarch")),Object(a.b)("li",{parentName:"ul"},"NOTE: This requires ",Object(a.b)("inlineCode",{parentName:"li"},"cluster-admin")," level privileges.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Perform the following for the ",Object(a.b)("inlineCode",{parentName:"strong"},"kc-ui")," microservices:")),Object(a.b)("p",null,"1.Build and push Docker images"),Object(a.b)("p",null,"  Create a Jenkins project, pointing to the remote GitHub repository for the KContainer UI Microservice, creating the necessary parameters.  Refer to the individual microserviceâ€™s ",Object(a.b)("inlineCode",{parentName:"p"},"Jenkinsfile.NoKubernetesPlugin")," for appropriate parameter values.\n- Create a String parameter named ",Object(a.b)("inlineCode",{parentName:"p"},"REGISTRY")," to determine a remote registry that is accessible from your cluster\n- Create a String parameter named ",Object(a.b)("inlineCode",{parentName:"p"},"REGISTRY_NAMESPACE")," to describe the registry namespace to push image into\n- Create a String parameter named ",Object(a.b)("inlineCode",{parentName:"p"},"IMAGE_NAME")," which should be self-expalantory\n- Create a String parameter named ",Object(a.b)("inlineCode",{parentName:"p"},"CONTEXT_DIR")," to determine the correct working directory to work from inside the source code, with respect to the root of the repository\n- Create a String parameter named ",Object(a.b)("inlineCode",{parentName:"p"},"DOCKERFILE")," to determine the desired Dockerfile to use to build the Docker image.  This is determined with respect to the ",Object(a.b)("inlineCode",{parentName:"p"},"CONTEXT_DIR")," parameter.\n- Create a Credentials parameter named ",Object(a.b)("inlineCode",{parentName:"p"},"REGISTRY_CREDENTIALS")," and assign the necessary credentials to allow Jenkins to push the image to the remote repository"),Object(a.b)("p",null,"2.Manually build the Docker image and push it to a registry that is accessible from your cluster (Docker Hub, IBM Cloud Container Registry, manually deployed Quay instance):\n- ",Object(a.b)("inlineCode",{parentName:"p"},"docker build -t <private-registry>/<image-namespace>/kcontainer-ui:latest ."),"\n- ",Object(a.b)("inlineCode",{parentName:"p"},"docker login <private-registry>"),"\n- ",Object(a.b)("inlineCode",{parentName:"p"},"docker push <private-registry>/<image-namespace>/kcontainer-ui:latest")),Object(a.b)("p",null,"3.Generate application YAMLs via ",Object(a.b)("inlineCode",{parentName:"p"},"helm template"),":"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Parameters:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--set image.repository=<private-registry>/<image-namespace>/<image-repository>")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--set image.tag=latest")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--set image.pullSecret=<private-registry-pullsecret>")," (only required if pulling from an external private registry)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--set image.pullPolicy=Always")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--set eventstreams.env=ICP")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--set eventstreams.brokersConfigMap=<kafka brokers ConfigMap name>")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--set serviceAccountName=<service-account-name>")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--namespace <target-namespace>")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--output-dir <local-template-directory>")))),Object(a.b)("li",{parentName:"ul"},"Example: ",Object(a.b)("inlineCode",{parentName:"li"},"helm template --set image.repository=rhos-quay.internal-network.local/browncompute/kc-ui --set image.pullPolicy=Always --set eventstreams.env=ICP --set eventstreams.brokersConfigMap=kafka-brokers --set serviceAccountName=kcontainer-runtime --output-dir templ --namespace eda-refarch chart/kc-ui/"))),Object(a.b)("p",null,"4.Deploy application using ",Object(a.b)("inlineCode",{parentName:"p"},"oc apply"),":"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"oc apply -f templ/kc-ui/templates"))))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-build-run-mdx-15e6b163691be49ded5a.js.map