{"version":3,"sources":["webpack:///./src/pages/build-run.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-build-run-mdx-15e6b163691be49ded5a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-kc-ui/refarch-kc-ui/docs-gatsby/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Pre-requisites`}</h2>\n    <p>{`Be sure to have cloned the root repository: `}<inlineCode parentName=\"p\">{`refarch_kc`}</inlineCode>{` as there is a dependency on the environment setting scripts (`}<inlineCode parentName=\"p\">{`refarch_kc/scripts/setenv.sh`}</inlineCode>{`).`}</p>\n    <p>{`The UI is using Angular so you need to get angular CLI installed, nodejs and npm.`}</p>\n    <p>{`Keep npm up to date with the command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install -g npm\n`}</code></pre>\n    <p>{`Verify node version (we run v 12.0)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`node -v\n`}</code></pre>\n    <p>{`To install or update Angular CLI`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cd ui\nnpm install -g @angular/cli\n`}</code></pre>\n    <p>{`And install all the dependencies`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install\n`}</code></pre>\n    <p>{`The project was started with Angular 6 and then migrated to Angular 8 with the commands:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ng update @angular/cli @angular/core\nng update @angular/material\n`}</code></pre>\n    <p>{`The test driven development approach is done using `}<a parentName=\"p\" {...{\n        \"href\": \"https://mochajs.org/\"\n      }}>{`mocha`}</a>{` as test runner and `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.chaijs.com\"\n      }}>{`chai`}</a>{` for assertion library and Typescript. Which means those tools were installed with the command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ npm install mocha chai ts-node --save-dev\n# and install the supporting types for Typescript\n# npm install @types/chai @types/mocha --save-dev\n`}</code></pre>\n    <h2>{`Build`}</h2>\n    <h3>{`UI Build`}</h3>\n    <p>{`While doing development, you can build the UI first, by being under the `}<inlineCode parentName=\"p\">{`ui`}</inlineCode>{` folder and run:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ng build\n`}</code></pre>\n    <p>{`You should get a trace like:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`chunk {main} main-es2015.js, main-es2015.js.map (main) 156 kB [initial] [rendered]\nchunk {polyfills} polyfills-es2015.js, polyfills-es2015.js.map (polyfills) 438 kB [initial] [rendered]\nchunk {runtime} runtime-es2015.js, runtime-es2015.js.map (runtime) 6.08 kB [entry] [rendered]\nchunk {styles} styles-es2015.js, styles-es2015.js.map (styles) 392 kB [initial] [rendered]\nchunk {vendor} vendor-es2015.js, vendor-es2015.js.map (vendor) 5.81 MB [initial] [rendered]\n`}</code></pre>\n    <p>{`The build artifacts will be stored in the `}<inlineCode parentName=\"p\">{`dist/`}</inlineCode>{` directory. Use the `}<inlineCode parentName=\"p\">{`--prod`}</inlineCode>{` flag for a production build so the javascripts will be smaller.`}</p>\n    <p>{`It is possible to test the User interface without the nodejs backend, by using`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ng serve\n`}</code></pre>\n    <p>{`Navigate to `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:4200/\"\n      }}>{`http://localhost:4200/`}</a>{`. The app will automatically reload if you change any of the UI source files.`}</p>\n    <p>{`You may encounter some issues as there are dependencies on the backend nodejs for some APIs and data.`}</p>\n    <h3>{`UI Running unit tests`}</h3>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`ng test`}</inlineCode>{` to execute the unit tests via `}<a parentName=\"p\" {...{\n        \"href\": \"https://karma-runner.github.io\"\n      }}>{`Karma`}</a>{`.`}</p>\n    <h3>{`Build and run the BFF server`}</h3>\n    <p>{`Run the command below:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm serve\n`}</code></pre>\n    <p>{`All those commands are executed when developing the server or ui parts. But when we need to deploy the user interface with the other components of the solution we first need to build a docker image and then be sure the other services are deployedâ€¦`}</p>\n    <h3>{`Dockerize all`}</h3>\n    <p>{`Build UI and server in one command: (this is what a CI/CD pipeline will use).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./scripts/buildDocker.sh\n`}</code></pre>\n    <p>{`This will build a docker image, named: `}<inlineCode parentName=\"p\">{`ibmcase/kcontainer-ui:latest`}</inlineCode>{` for local execution using docker-compose.`}</p>\n    <p>{`If you run on minikube locally use:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./scripts/buildDocker.sh MINIKUBE\n`}</code></pre>\n    <h2>{`Run locally`}</h2>\n    <p>{`To be able to run the UI and server locally, you need to have at least the following kafka, zookeeper, order command, order query and fleet simulator microservices up and running.`}</p>\n    <p>{`As introduced before we have two options to run the solution, Minikube or docker-compose.`}</p>\n    <h3>{`Using docker compose`}</h3>\n    <p>{`We recommend to read `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm-cloud-architecture.github.io/refarch-kc/deployments/local/\"\n      }}>{`this chapter`}</a></p>\n    <p>{`If not done already start Kafka and zookeeper using the docker compose file in the root project:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cd ../refarch-kc/docker\ndocker-compose -f backbone-compose.yml up\n`}</code></pre>\n    <p>{`Start the Fleet simulator.  For the fleet simulator `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-ms/tree/master/fleet-ms#run\"\n      }}>{`see instructions here`}</a>{` to run the simulator locally.`}</p>\n    <p>{`Run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./scripts/buildLocal.sh\n`}</code></pre>\n    <p>{`Start the UI and BFF locally with `}<inlineCode parentName=\"p\">{`./scripts/run.sh`}</inlineCode>{` or with a docker `}<inlineCode parentName=\"p\">{`./scripts/runDocker.sh`}</inlineCode>{`.`}</p>\n    <p>{`Use your web browser at `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:31010\"\n      }}>{`http://localhost:31010`}</a></p>\n    <h3>{`Using Minikube`}</h3>\n    <p>{`See the instruction in `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm-cloud-architecture.github.io/refarch-kc/deployments/minikube/\"\n      }}>{`this article`}</a>{` for deploying all the components.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`scripts\\\\deployHelm MINIKUBE latest`}</inlineCode>{` command to use Helm to deploy the user interface release.`}</p>\n    <p>{`Use your web browser at `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:31010\"\n      }}>{`http://localhost:31010`}</a></p>\n    <h2>{`Deploy to OpenShift Container Platform (OCP)`}</h2>\n    <h3>{`Deployment prerequisites`}</h3>\n    <p>{`Regardless of specific deployment targets (OCP, IKS, k8s), the following prerequisite Kubernetes artifacts need to be created to support the deployments of application components.  These artifacts need to be created once per unique deployment of the entire application and can be shared between application components in the same overall application deployment.`}</p>\n    <p>{`1.Create `}<inlineCode parentName=\"p\">{`kafka-brokers`}</inlineCode>{` ConfigMap`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Command: `}<inlineCode parentName=\"li\">{`kubectl create configmap kafka-brokers --from-literal=brokers='<replace with comma-separated list of brokers>' -n <namespace>`}</inlineCode></li>\n      <li parentName=\"ul\">{`Example: `}<inlineCode parentName=\"li\">{`kubectl create configmap kafka-brokers --from-literal=brokers='broker-3-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-2-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-1-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-5-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-0-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-4-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093' -n eda-refarch`}</inlineCode></li>\n    </ul>\n    <p>{`2.Create optional `}<inlineCode parentName=\"p\">{`eventstreams-apikey`}</inlineCode>{` Secret, if you are using Event Streams as your Kafka broker provider`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Command: `}<inlineCode parentName=\"li\">{`kubectl create secret generic eventstreams-apikey --from-literal=binding='<replace with api key>' -n <namespace>`}</inlineCode></li>\n      <li parentName=\"ul\">{`Example: `}<inlineCode parentName=\"li\">{`kubectl create secret generic eventstreams-apikey --from-literal=binding='z...12345...notanactualkey...67890...a' -n eda-refarch`}</inlineCode></li>\n    </ul>\n    <h3>{`Deploy to OCP 3.11`}</h3>\n    <p><strong parentName=\"p\">{`Cross-component deployment prerequisites:`}</strong>{` `}<em parentName=\"p\">{`(needs to be done once per unique deployment of the entire application)`}</em></p>\n    <p>{`1.If desired, create a non-default Service Account for usage of deploying and running the K Container reference implementation.  This will become more important in future iterations, so itâ€™s best to start small:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Command: `}<inlineCode parentName=\"li\">{`oc create serviceaccount -n <target-namespace> kcontainer-runtime`}</inlineCode></li>\n      <li parentName=\"ul\">{`Example: `}<inlineCode parentName=\"li\">{`oc create serviceaccount -n eda-refarch kcontainer-runtime`}</inlineCode></li>\n    </ul>\n    <p>{`2.The target Service Account needs to be allowed to run containers as `}<inlineCode parentName=\"p\">{`anyuid`}</inlineCode>{` for the time being:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Command: `}<inlineCode parentName=\"li\">{`oc adm policy add-scc-to-user anyuid -z <service-account-name> -n <target-namespace>`}</inlineCode></li>\n      <li parentName=\"ul\">{`Example: `}<inlineCode parentName=\"li\">{`oc adm policy add-scc-to-user anyuid -z kcontainer-runtime -n eda-refarch`}</inlineCode></li>\n      <li parentName=\"ul\">{`NOTE: This requires `}<inlineCode parentName=\"li\">{`cluster-admin`}</inlineCode>{` level privileges.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Perform the following for the `}<inlineCode parentName=\"strong\">{`kc-ui`}</inlineCode>{` microservices:`}</strong></p>\n    <p>{`1.Build and push Docker images`}</p>\n    <p>{`  Create a Jenkins project, pointing to the remote GitHub repository for the KContainer UI Microservice, creating the necessary parameters.  Refer to the individual microserviceâ€™s `}<inlineCode parentName=\"p\">{`Jenkinsfile.NoKubernetesPlugin`}</inlineCode>{` for appropriate parameter values.\n- Create a String parameter named `}<inlineCode parentName=\"p\">{`REGISTRY`}</inlineCode>{` to determine a remote registry that is accessible from your cluster\n- Create a String parameter named `}<inlineCode parentName=\"p\">{`REGISTRY_NAMESPACE`}</inlineCode>{` to describe the registry namespace to push image into\n- Create a String parameter named `}<inlineCode parentName=\"p\">{`IMAGE_NAME`}</inlineCode>{` which should be self-expalantory\n- Create a String parameter named `}<inlineCode parentName=\"p\">{`CONTEXT_DIR`}</inlineCode>{` to determine the correct working directory to work from inside the source code, with respect to the root of the repository\n- Create a String parameter named `}<inlineCode parentName=\"p\">{`DOCKERFILE`}</inlineCode>{` to determine the desired Dockerfile to use to build the Docker image.  This is determined with respect to the `}<inlineCode parentName=\"p\">{`CONTEXT_DIR`}</inlineCode>{` parameter.\n- Create a Credentials parameter named `}<inlineCode parentName=\"p\">{`REGISTRY_CREDENTIALS`}</inlineCode>{` and assign the necessary credentials to allow Jenkins to push the image to the remote repository`}</p>\n    <p>{`2.Manually build the Docker image and push it to a registry that is accessible from your cluster (Docker Hub, IBM Cloud Container Registry, manually deployed Quay instance):\n- `}<inlineCode parentName=\"p\">{`docker build -t <private-registry>/<image-namespace>/kcontainer-ui:latest .`}</inlineCode>{`\n- `}<inlineCode parentName=\"p\">{`docker login <private-registry>`}</inlineCode>{`\n- `}<inlineCode parentName=\"p\">{`docker push <private-registry>/<image-namespace>/kcontainer-ui:latest`}</inlineCode></p>\n    <p>{`3.Generate application YAMLs via `}<inlineCode parentName=\"p\">{`helm template`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Parameters:`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--set image.repository=<private-registry>/<image-namespace>/<image-repository>`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--set image.tag=latest`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--set image.pullSecret=<private-registry-pullsecret>`}</inlineCode>{` (only required if pulling from an external private registry)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--set image.pullPolicy=Always`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--set eventstreams.env=ICP`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--set eventstreams.brokersConfigMap=<kafka brokers ConfigMap name>`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--set serviceAccountName=<service-account-name>`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--namespace <target-namespace>`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--output-dir <local-template-directory>`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\">{`Example: `}<inlineCode parentName=\"li\">{`helm template --set image.repository=rhos-quay.internal-network.local/browncompute/kc-ui --set image.pullPolicy=Always --set eventstreams.env=ICP --set eventstreams.brokersConfigMap=kafka-brokers --set serviceAccountName=kcontainer-runtime --output-dir templ --namespace eda-refarch chart/kc-ui/`}</inlineCode></li>\n    </ul>\n    <p>{`4.Deploy application using `}<inlineCode parentName=\"p\">{`oc apply`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`oc apply -f templ/kc-ui/templates`}</inlineCode></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}